What happens when you initialize a repository? Why do you need to do it?
-it creates a new hidden file where it's saved all the changes that you make when you do a commit, and because it will get track of everithing you do.
How is the staging area different from the working directory and the repository? What value do you think it offers?
-in the staging area you can do all the changes you want without making a commit and having all the chages in the repository, just when you are sure of what you do you then use the commit to put it in the repository.
How can you use the staging area to make sure you have one commit per logical change?
-just adding one file per logical change tne commiting and then keep doing that until all the changes have been commited.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-in case of a version to be experimental and you don't want it in your main tree or if there are some changes that are being tested.
How do the diagrams help you visualize the branch structure?
-it helps me because you can see the history of the branches and how to checkout depending in which of the branch you are.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-it results in the merge of both codes with all the changes they do separatedly into one.
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
-because manually you can choose which changes can be in the commit and automatically just takes all the changes and put them in the commit.
